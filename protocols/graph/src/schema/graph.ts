// @generated by protobuf-ts 1.0.13 with parameters generate_dependencies
// @generated from protobuf file "graph.proto" (package "graph", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "./google/protobuf/struct";
/**
 * @generated from protobuf message graph.Request
 */
export interface Request {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: google.protobuf.Value variable_values = 2;
     */
    variableValues?: Value;
    /**
     * @generated from protobuf field: string operation_name = 3;
     */
    operationName: string;
}
/**
 * @generated from protobuf message graph.Result
 */
export interface Result {
    /**
     * @generated from protobuf field: google.protobuf.Value data = 1;
     */
    data?: Value;
}
/**
 * Type for protobuf message graph.Request
 */
class Request$Type extends MessageType<Request> {
    constructor() {
        super("graph.Request", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "variable_values", kind: "message", T: () => Value },
            { no: 3, name: "operation_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { query: "", operationName: "" };
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* google.protobuf.Value variable_values */ 2:
                    message.variableValues = Value.internalBinaryRead(reader, reader.uint32(), options, message.variableValues);
                    break;
                case /* string operation_name */ 3:
                    message.operationName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* google.protobuf.Value variable_values = 2; */
        if (message.variableValues)
            Value.internalBinaryWrite(message.variableValues, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string operation_name = 3; */
        if (message.operationName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.operationName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Request = new Request$Type();
/**
 * Type for protobuf message graph.Result
 */
class Result$Type extends MessageType<Result> {
    constructor() {
        super("graph.Result", [
            { no: 1, name: "data", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<Result>): Result {
        const message = {};
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Value data */ 1:
                    message.data = Value.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Value data = 1; */
        if (message.data)
            Value.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Result = new Result$Type();
